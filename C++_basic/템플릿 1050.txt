#include <iostream>
#include <string>
#include <cctype>
#include "header.h"

using std::cin;
using std::cout;


template<class T>
class stack
{
private:
	enum { max = 10 };

	T item[max];
	int top;

public:
	stack();
	bool isempty();
	bool isfull();
	bool push(const T& item);
	bool pop(T& item);

};

template<class T>
stack<T>::stack()
{
	top = 0;
}

template<class T>
bool stack<T>::isempty()
{
	return top == 0;
}

template<class T>
bool stack<T>::isfull()
{
	return top == max;
}

template<class T>
bool stack<T>::push(const T& item)
{
	if (top < max)
	{
		this->item[top++] = item;
		return true;
	}

	else
		return false;
}

template<class T>
bool stack<T>::pop(T& item)
{
	if (top > 0)
	{
		item = item[--top];
		return true;
	}

	else
		return false;
}




int main()
{
	stack < std::string > st;
	char ch;
	std::string po;

	cout << "주문서를 추가하려면  A,주문서를 처리하려면 P,\n" << "종료할려면 Q를 입력하십시오\n";

	while (cin >> ch && std::toupper(ch) != 'Q')
	{
		while (cin.get() != '\n')
		{
			continue;
		}

		if (!std::isalpha(ch))
		{
			cout << 'a';
			continue;
		}

		switch (ch)
		{
		case 'A':
		case 'a':cout << "추가할 주문서의 번호를 입력하십시오:";
			cin >> po;
			if (st.isfull())
				cout << "스택이 가득차있음\n";
			else
				st.push(po);
			break;

		case 'P':
		case 'p':if (st.isempty())
			cout << "스택이 비어있습니다\n";
				else {
			st.pop(po);
			cout << "#" << po << "주문서를 처리했습니다";
			break;
		}

		}

		cout << "주문서를 추가하려면 A,주문서를 처리할려면 P,\n" << "종료하려면 Q를 입력하십시오.\n";
	}

	cout << "프로그램을 종료합니다\n";
	return 0;
}