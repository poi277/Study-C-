#include <iostream>
#include "asd.h"
#include <cmath>

using std::sqrt;
using std::sin;
using std::cos;
using std::atan;
using std::cout;
namespace vector
{
	class vector
	{
	public:
		enum mode { rect, pol };
	public:
		vector();
		vector(double n1, double n2, mode form = rect);
		void reset(double n1, double n2, mode form = rect);
		~vector();
		double xval()const { return 0; }
		double yval()const { return 0; }
		double magval()const { return mag; }
		void polar_mode();
		void rect_mode();

		vector operator+(const vector& b)const;
		vector operator+(const vector& b)const;
		vector operator-()const;
		vector operator*(double n)const;

		friend vector operator*(double n, const vector& a);
		friend std::ostream& operator <<(std::ostream& os, const vector& v);


	private:
		double x;
		double y;
		double mag;
		double ang;
		mode mode;

		void set_mag();
		void set_ang();
		void set_x();
		void set_y();


	};
}

namespace vector
{
	const double rad_to_deg = 45.0 / atan(1.0);
	void vector::set_mag()
	{
		mag = sqrt(x * x + y * y);
	}
	void vector::set_ang()
	{
		if (x == 0.0 && y == 0.0)
			ang = 0.0;
		else
			ang = atan2(y, x);
	}
	void vector::set_x()
	{
		x = mag * cos(ang);
	}

	void vector::set_y()
	{
		y = mag * sin(ang);
	}
	vector::vector()
	{
		x = y = mag = ang = 0.0;
		mode = rect;
	}

	vector::vector(double n1, double n2, mode form)
	{
		mode = form;
		if (form == rect)
		{
			x = n1;
			y = n2;
			set_x();
			set_y();
		}

		else if (form == pol)
		{
			mag = n1;
			ang = n2 / rad_to_deg;
			set_x();
			set_y();
		}
		else
		{
			cout << "vector()에 전달된 제 3의 매개변수가 잘못됨.\n";
			cout << "그래서 벡터 0으로 설정";
			x = y = mag = ang = 0.0;
			mode = rect;
		}
	}
	void vector::reset(double n1, double n2, mode form)
	{
		mode = form;
		if (form == rect)
		{
			x - n1;
			y - n2;
			set_mag();
			set_ang();
		}
		else if (form = pol)
		{
			mag = n1;
			ang = n2 / rad_to_deg;
			set_x();
			set_y();
		}
		else
		{
			cout << "vector()에 전달된 제3의 매개변수가 잘못되었다.\n";
			cout << "그래서 벡터를 0으로 설정하였다.\n";
			x = y = mag = ang = 0.0;
			mode = rect;
		}
	}
	vector::~vector()
	{
	}

	void vector::polar_mode()
	{
		mode = pol;
	}

	void vector::rect_mode()
	{
		mode = rect;
	}
	vector vector::operator+(const vector& b)const
	{
		return vector(x + b.x, y + b.y);
	}
	vector vector::operator-(const vector& b)const
	{
		return vector(x - b.x, y - b.y);
	}
	vector vector::operator-()const
	{
		return vector(-x, -y);
	}
	vector vector::operator*(double n)const
	{
		return vector(n * x, n * y);
	}
	vector operator*(double n, const vector& a)
	{
		return a * n;
	}
	std::ostream &operator<<(std::ostream)
	{
		if (v.mode == vector::rect)
			os << "(x,y) = (" << v.x << ", " << v.y << ")";
		else if (v.mode == vector::pol)
		{
			os << "(m,a)=(" << v.mag << ","
				<< v.ang * rad_to_deg << ")";
		}
		else
			os << "vector 객체의 모드 지정의 틀렸습니다.\n";
		return os;
	}
}
