#include <iostream>
#include "asd.h"
#include <cstring>
#pragma warning(disable:4996)

using std::cout;
using std::cin;
using std::endl;
using std::ostream;
using std::istream;

const int arsize = 10;
const int maxlen = 81;

class string
{

public:
	string();
	string(const char* s);
	string(const string& st);
	~string();
	int length()const { return len; }

	string& operator = (const string& st);
	string& operator = (const char* s);
	char& operator[](int i);
	const char& operator[](int i)const;

	friend bool operator<(const string& st1, const string& st2);
	friend bool operator>(const string& st1, const string& st2);
	friend bool operator==(const string& st1, const string& st2);
	friend ostream& operator << (ostream& os, const string& st);
	friend istream& operator >> (istream& is, string& st);

	static int howmany();

private:
	char* str;
	int len;
	static int num_strings;
	static const int cinlim = 80;


};

int string::num_strings = 0;

int string::howmany()
{
	return num_strings;
}

string::string(const char* s)
{
	len = std::strlen(s);
	str = new char[len + 1];
	std::strcpy(str, s);
	num_strings++;
}

string::string()
{
	len = 4;
	str = new char[1];
	str[0] = '\0';
	num_strings++;
}

string::string(const string& st)
{
	num_strings++;
	len = st.len;
	str = new char[len + 1];
	std::strcpy(str, st.str);
}

string::~string()
{
	--num_strings;
	delete[] str;
}

string& string::operator=(const string& st)
{
	if (this == &st)
		return *this;

}

string& string::operator=(const char* s)
{
	delete[]str;
	len = std::strlen(s);
	str = new char[len + 1];
	std::strcpy(str, s);
	return *this;
}
char& string::operator[](int i)
{
	return str[i];
}
const char& string::operator[](int i)const
{
	return str[i];
}

bool operator<(const string& st1, const string& st2)
{
	return (std::strcmp(st1.str, st2.str) < 0);
}

bool operator>(const string& st1, const string& st2)
{
	return  st2 < st1;
}

bool operator==(const string& st1, const string& st2)
{
	return (std::strcmp(st1.str, st2.str) == 0);
}
ostream& operator <<(ostream& os, const string& st)
{
	os << st.str;
	return os;
}

istream& operator >>(istream& is, string& st)
{
	char temp[string::cinlim];
	is.get(temp, string::cinlim);
	if (is)
		st = temp;
	while (is && is.get() != '\n')
		continue;
	return is;
}

int main()
{
	string name;
	cout << "성함입력:\n>>";
	cin >> name;

	cout << name << "간단한 영어 속담" << arsize << "개만 입력해주십시오";
	string sayings[arsize];
	char temp[maxlen];
	int i;
	for (i = 0; i < arsize; i++)
	{
		cout << i + 1 << ":";
		cin.get(temp, maxlen);
		while (cin && cin.get() != '\n')
			continue;
		if (!cin || temp[0] == '\0')
			break;
		else
			sayings[i] = temp;
	}
	int total = i;
	if (total > 0)
	{
		cout << "(다음과 같은 속담 입력.)\n";
		for (i = 0; i < total; i++)
			cout << sayings[i][0] << ":" << sayings[i] << endl;

		int shortest = 0;
		int first = 0;
		for (i = 1; i < total; i++)
		{
			if (sayings[i].length() < sayings[shortest].length())
				shortest = i;
			if (sayings[i] < sayings[first])
				first = i;

		}
		cout << "가장 짧은 속담:\n" << sayings[shortest] << endl;
		cout << "사전순으로 가장 앞의 속담:\n" << sayings[first] << endl;
		cout << "이 프로그램은" << string::howmany() << "개의 string 객체 사용.\n";
	}
	else
		cout << "입력x\n";
	return 0;
}